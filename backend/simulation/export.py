"""
データエクスポートユーティリティ
学術論文用のデータ出力（CSV, JSON, MATLAB .mat形式）
"""
import json
import csv
from typing import Dict, Any
import numpy as np
from pathlib import Path


def export_to_csv(data: Dict[str, Any], filepath: str) -> str:
    """
    シミュレーション結果をCSVエクスポート
    
    Args:
        data: シミュレーションデータ
        filepath: 出力先パス
        
    Returns:
        出力ファイルパス
    """
    time = data.get('time', [])
    stimulus = data.get('stimulus', [])
    response = data.get('response', [])
    
    with open(filepath, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['time', 'stimulus', 'response'])
        for t, u, y in zip(time, stimulus, response):
            writer.writerow([t, u, y])
    
    return filepath


def export_to_json(data: Dict[str, Any], filepath: str, pretty: bool = True) -> str:
    """
    シミュレーション結果をJSONエクスポート（メタデータ付き）
    
    Args:
        data: シミュレーションデータ
        filepath: 出力先パス
        pretty: 整形出力するか
        
    Returns:
        出力ファイルパス
    """
    with open(filepath, 'w', encoding='utf-8') as f:
        if pretty:
            json.dump(data, f, indent=2, ensure_ascii=False)
        else:
            json.dump(data, f, ensure_ascii=False)
    
    return filepath


def export_analysis_report(
    data: Dict[str, Any], 
    material_name: str,
    stimulus_type: str,
    filepath: str
) -> str:
    """
    学術レポート形式でMarkdownエクスポート
    
    Args:
        data: シミュレーションデータ
        material_name: 素材名
        stimulus_type: 刺激タイプ
        filepath: 出力先パス
        
    Returns:
        出力ファイルパス
    """
    analysis = data.get('analysis', {})
    
    report = f"""# Material Memory Analysis Report

## Experimental Conditions

- **Material**: {material_name}
- **Stimulus Type**: {stimulus_type}
- **Duration**: {data.get('time', [])[-1] if data.get('time') else 'N/A'} seconds
- **Data Points**: {len(data.get('time', []))}

## Statistical Analysis

### Memory Characteristics

- **Memory Time Constant (τ)**: {analysis.get('memory_tau', 0):.4f} s
- **Peak Response**: {analysis.get('peak_response', 0):.4f}
- **Peak Time**: {analysis.get('peak_time', 0):.4f} s
- **Decay Rate**: {analysis.get('decay_rate', 0):.4f}

### Information Theory

- **Mutual Information I(U;Y)**: {analysis.get('mutual_information', 0):.4f} bits
- **Entropy (Input)**: {analysis.get('information_theory', {}).get('entropy_input', 0):.4f} bits
- **Entropy (Output)**: {analysis.get('information_theory', {}).get('entropy_output', 0):.4f} bits
- **Transfer Entropy**: {analysis.get('information_theory', {}).get('transfer_entropy', 0):.4f} bits
- **Information Efficiency**: {analysis.get('information_theory', {}).get('information_efficiency', 0):.4f}

### Causality Analysis

- **Maximum Correlation**: {analysis.get('causality', {}).get('max_correlation', 0):.4f}
- **Optimal Lag**: {analysis.get('causality', {}).get('optimal_lag', 0):.4f} s
- **P-value**: {analysis.get('causality', {}).get('p_value', 1):.6f}
- **Statistical Significance**: {'Yes (p < 0.05)' if analysis.get('causality', {}).get('is_significant', False) else 'No'}

### System Stability

- **Lyapunov Exponent**: {analysis.get('lyapunov_exponent', 0):.4f}
- **Stability**: {analysis.get('system_stability', 'unknown')}
- **Stationarity**: {'Stationary' if analysis.get('stationarity', {}).get('is_stationary', False) else 'Non-stationary'}

### Spectral Analysis

- **Dominant Frequency**: {analysis.get('spectral', {}).get('dominant_frequency', 0):.4f} Hz
- **Total Power**: {analysis.get('spectral', {}).get('total_power', 0):.4f}
- **Low Frequency Ratio**: {analysis.get('spectral', {}).get('low_freq_ratio', 0):.4f}

## Interpretation

"""
    
    # 解釈の自動生成
    if analysis.get('memory_tau', 0) > 5:
        report += "- The material exhibits **long-term memory retention** (viscous behavior)\n"
    else:
        report += "- The material shows **short-term memory** (fast response)\n"
    
    if analysis.get('causality', {}).get('is_significant', False):
        report += "- **Strong causal relationship** between stimulus and response (statistically significant)\n"
    else:
        report += "- Weak or no significant causal relationship detected\n"
    
    if analysis.get('lyapunov_exponent', 0) < 0:
        report += "- The system is **dynamically stable**\n"
    elif analysis.get('lyapunov_exponent', 0) > 0.1:
        report += "- The system shows **chaotic tendencies**\n"
    else:
        report += "- The system is **marginally stable**\n"
    
    if analysis.get('information_theory', {}).get('information_efficiency', 0) > 0.7:
        report += "- **High information transmission efficiency** between input and output\n"
    else:
        report += "- Information transmission is affected by noise or nonlinearity\n"
    
    report += f"\n---\n\n*Generated by Material Memory Simulator*\n"
    
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(report)
    
    return filepath


def export_to_matlab_compatible(data: Dict[str, Any], filepath: str) -> str:
    """
    MATLAB互換形式でエクスポート（.matファイル用のJSONブリッジ）
    
    実際の.mat出力にはscipy.io.savemat が必要
    ここではMATLABで読み込み可能なJSON形式を出力
    
    Args:
        data: シミュレーションデータ
        filepath: 出力先パス
        
    Returns:
        出力ファイルパス
    """
    # MATLABスクリプト生成
    matlab_script = f"""% Auto-generated MATLAB import script
% Load JSON data
data = jsondecode(fileread('{Path(filepath).stem}.json'));

% Extract variables
time = data.time;
stimulus = data.stimulus;
response = data.response;

% Plot
figure;
subplot(2,1,1);
plot(time, stimulus, 'r-', 'LineWidth', 2);
title('Stimulus');
xlabel('Time (s)');
ylabel('Amplitude');
grid on;

subplot(2,1,2);
plot(time, response, 'b-', 'LineWidth', 2);
title('Response');
xlabel('Time (s)');
ylabel('Amplitude');
grid on;

% Analysis
fprintf('Memory tau: %.4f s\\n', data.analysis.memory_tau);
fprintf('Peak response: %.4f\\n', data.analysis.peak_response);
fprintf('Mutual information: %.4f bits\\n', data.analysis.mutual_information);
"""
    
    # JSONデータも併せて出力
    json_path = filepath.replace('.m', '.json')
    export_to_json(data, json_path)
    
    # MATLABスクリプト出力
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(matlab_script)
    
    return filepath
