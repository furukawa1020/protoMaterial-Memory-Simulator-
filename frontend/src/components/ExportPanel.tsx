'use client';

import React from 'react';
import { SimulationResponse, MaterialType, StimulusType } from '@/lib/types';

interface ExportPanelProps {
  data: SimulationResponse | null;
  materialType: MaterialType;
  stimulusType: StimulusType;
}

export default function ExportPanel({ data, materialType, stimulusType }: ExportPanelProps) {
  if (!data) return null;

  const materialNames: Record<MaterialType, string> = {
    wood: 'Êú®Êùê',
    metal: 'ÈáëÂ±û',
    cloth: 'Â∏É',
    soil: 'Âúü',
    water: 'Ê∞¥',
  };

  const exportToCSV = () => {
    const { time, stimulus, response } = data;
    let csv = 'time,stimulus,response\n';
    
    for (let i = 0; i < time.length; i++) {
      csv += `${time[i]},${stimulus[i]},${response[i]}\n`;
    }
    
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `${materialType}_${stimulusType}_simulation.csv`;
    link.click();
  };

  const exportToJSON = () => {
    const jsonStr = JSON.stringify(data, null, 2);
    const blob = new Blob([jsonStr], { type: 'application/json' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `${materialType}_${stimulusType}_simulation.json`;
    link.click();
  };

  const exportReport = () => {
    const { analysis } = data;
    const materialName = materialNames[materialType];
    
    const report = `# Material Memory Analysis Report

## Experimental Conditions

- **Material**: ${materialName}
- **Stimulus Type**: ${stimulusType}
- **Duration**: ${data.time[data.time.length - 1].toFixed(2)} seconds
- **Data Points**: ${data.time.length}

## Statistical Analysis

### Memory Characteristics

- **Memory Time Constant (œÑ)**: ${analysis.memory_tau.toFixed(4)} s
- **Peak Response**: ${analysis.peak_response.toFixed(4)}
- **Peak Time**: ${analysis.peak_time.toFixed(4)} s
- **Decay Rate**: ${analysis.decay_rate.toFixed(4)}

### Information Theory

- **Mutual Information I(U;Y)**: ${analysis.mutual_information.toFixed(4)} bits
- **Entropy (Input)**: ${analysis.information_theory?.entropy_input.toFixed(4) || 'N/A'} bits
- **Entropy (Output)**: ${analysis.information_theory?.entropy_output.toFixed(4) || 'N/A'} bits
- **Transfer Entropy**: ${analysis.information_theory?.transfer_entropy.toFixed(4) || 'N/A'} bits
- **Information Efficiency**: ${((analysis.information_theory?.information_efficiency || 0) * 100).toFixed(2)}%

### Causality Analysis

- **Maximum Correlation**: ${analysis.causality?.max_correlation.toFixed(4) || 'N/A'}
- **Optimal Lag**: ${analysis.causality?.optimal_lag.toFixed(4) || 'N/A'} s
- **P-value**: ${analysis.causality?.p_value.toFixed(6) || 'N/A'}
- **Statistical Significance**: ${analysis.causality?.is_significant ? 'Yes (p < 0.05)' : 'No'}

### System Stability

- **Lyapunov Exponent**: ${analysis.lyapunov_exponent?.toFixed(4) || 'N/A'}
- **Stability**: ${analysis.system_stability || 'unknown'}
- **Stationarity**: ${analysis.stationarity?.is_stationary ? 'Stationary' : 'Non-stationary'}

### Spectral Analysis

- **Dominant Frequency**: ${analysis.spectral?.dominant_frequency.toFixed(4) || 'N/A'} Hz
- **Total Power**: ${analysis.spectral?.total_power.toFixed(4) || 'N/A'}
- **Low Frequency Ratio**: ${((analysis.spectral?.low_freq_ratio || 0) * 100).toFixed(2)}%

## Interpretation

${analysis.memory_tau > 5 
  ? '- The material exhibits **long-term memory retention** (viscous behavior)' 
  : '- The material shows **short-term memory** (fast response)'}

${analysis.causality?.is_significant 
  ? '- **Strong causal relationship** between stimulus and response (statistically significant)' 
  : '- Weak or no significant causal relationship detected'}

${(analysis.lyapunov_exponent || 0) < 0 
  ? '- The system is **dynamically stable**' 
  : (analysis.lyapunov_exponent || 0) > 0.1 
    ? '- The system shows **chaotic tendencies**' 
    : '- The system is **marginally stable**'}

${(analysis.information_theory?.information_efficiency || 0) > 0.7 
  ? '- **High information transmission efficiency** between input and output' 
  : '- Information transmission is affected by noise or nonlinearity'}

---

*Generated by Material Memory Simulator*
`;
    
    const blob = new Blob([report], { type: 'text/markdown;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `${materialType}_${stimulusType}_report.md`;
    link.click();
  };

  const exportMATLAB = () => {
    const matlabScript = `% Auto-generated MATLAB import script for ${materialNames[materialType]}
% Stimulus: ${stimulusType}

% Load data
data = jsondecode(fileread('${materialType}_${stimulusType}_simulation.json'));

% Extract variables
time = data.time;
stimulus = data.stimulus;
response = data.response;

% Plot
figure('Name', 'Material Memory Simulation', 'NumberTitle', 'off');

subplot(2,1,1);
plot(time, stimulus, 'r-', 'LineWidth', 2);
title('Stimulus (Input)');
xlabel('Time (s)');
ylabel('Amplitude');
grid on;

subplot(2,1,2);
plot(time, response, 'b-', 'LineWidth', 2);
title('Response (Output)');
xlabel('Time (s)');
ylabel('Amplitude');
grid on;

% Display analysis results
fprintf('\\n=== Analysis Results ===\\n');
fprintf('Memory tau: %.4f s\\n', data.analysis.memory_tau);
fprintf('Peak response: %.4f\\n', data.analysis.peak_response);
fprintf('Mutual information: %.4f bits\\n', data.analysis.mutual_information);
fprintf('Lyapunov exponent: %.4f\\n', data.analysis.lyapunov_exponent);
fprintf('System stability: %s\\n', data.analysis.system_stability);
`;
    
    const blob = new Blob([matlabScript], { type: 'text/plain;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `import_${materialType}_${stimulusType}.m`;
    link.click();
    
    // JSON also download for MATLAB
    exportToJSON();
  };

  return (
    <div className="glass-card p-6">
      <h3 className="text-xl font-bold text-white mb-4">
        üíæ „Éá„Éº„Çø„Ç®„ÇØ„Çπ„Éù„Éº„Éà
      </h3>
      <div className="grid grid-cols-2 gap-3">
        <button
          onClick={exportToCSV}
          className="bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-4 rounded-lg transition-all active:scale-95"
        >
          üìä CSVÂΩ¢Âºè
        </button>
        <button
          onClick={exportToJSON}
          className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-4 rounded-lg transition-all active:scale-95"
        >
          üìÑ JSONÂΩ¢Âºè
        </button>
        <button
          onClick={exportReport}
          className="bg-purple-600 hover:bg-purple-700 text-white font-semibold py-3 px-4 rounded-lg transition-all active:scale-95"
        >
          üìù Â≠¶Ë°ì„É¨„Éù„Éº„Éà
        </button>
        <button
          onClick={exportMATLAB}
          className="bg-orange-600 hover:bg-orange-700 text-white font-semibold py-3 px-4 rounded-lg transition-all active:scale-95"
        >
          üî¨ MATLABÁî®
        </button>
      </div>
      <p className="text-gray-300 text-xs mt-3">
        ‚Äª Â≠¶Ë°ìË´ñÊñá„Éª„Éó„É¨„Çº„É≥„ÉÜ„Éº„Ç∑„Éß„É≥„Å´‰ΩøÁî®ÂèØËÉΩ„Å™ÂΩ¢Âºè„Åß„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åß„Åç„Åæ„Åô
      </p>
    </div>
  );
}
